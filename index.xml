<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Coat — Config of Annotated Types</title><link>https://poiu-de.github.io/coat-site/</link><description>Recent content on Coat — Config of Annotated Types</description><generator>Hugo -- gohugo.io</generator><atom:link href="https://poiu-de.github.io/coat-site/index.xml" rel="self" type="application/rss+xml"/><item><title>Prerequisites</title><link>https://poiu-de.github.io/coat-site/docs/quick_start/01_prerequisites/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat-site/docs/quick_start/01_prerequisites/</guid><description>Coat has no runtime dependencies on other libraries.
The annotation processor has some dependencies on other libraries (which is why it is recommended to use maven as it resolves those dependencies automatically), but none of them are needed at runtime.
Coat can be used with Java 11 or higher.</description></item><item><title>Annotations</title><link>https://poiu-de.github.io/coat-site/docs/user_guide/02_annotations/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat-site/docs/user_guide/02_annotations/</guid><description>Coat provides two annotations, a type-level annotation @Coat.Config and a method-level annotation @Coat.Param. Both annotations are mandatory.
@Coat.Config Each interface that should be processed by the annotation processor must be annotated with @Coat.Config.
The generated class will always be generated in the same package as the annotated interfaec.
The name of the generated class is by the default the interface name with Immutable prepended to it. One exception is if the interface name starts with an underscore.</description></item><item><title>Installation</title><link>https://poiu-de.github.io/coat-site/docs/quick_start/02_installation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat-site/docs/quick_start/02_installation/</guid><description>Coat consists of two separate jars.
The annotation processor to generate the config classes. Only needed at compile time. The runtime package containing the common base class for all generated config classes and the default type converters. Needed at runtime. To use Coat in a maven based project use the following maven coordinates:
1 &amp;lt;!-- Contains the annotation processor. Not needed at runtime. --&amp;gt; 2 &amp;lt;dependency&amp;gt; 3 &amp;lt;groupId&amp;gt;de.poiu.coat&amp;lt;/groupId&amp;gt; 4 &amp;lt;artifactId&amp;gt;coat-processor&amp;lt;/artifactId&amp;gt; 5 &amp;lt;version&amp;gt;0.</description></item><item><title>Usage</title><link>https://poiu-de.github.io/coat-site/docs/quick_start/03_usage/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat-site/docs/quick_start/03_usage/</guid><description>Create config interface Write an interface with accessor methods for each config entry your application supports. The accessor methods can return to concrete types you want your config entry to be. There is number of types that are supported by default, but custom types can be registered to support additional types.
Config values that are optional, must be of type java.util.Optional or the more specialized variants OptionalInt, OptionalLong or OptionalDouble. All other config values are considered mandatory.</description></item><item><title>Validation</title><link>https://poiu-de.github.io/coat-site/docs/user_guide/03_validation/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat-site/docs/user_guide/03_validation/</guid><description>The generated config class allows the validation of the configuration with the method validate(). This can be used to fail early in case the given configuration is missing some values or existing values cannot be converted into the specified type.
If the configuration is valid this method just returns.
If the configuration is invalid, it will throw a ConfigValidationException. This exception has a method getValidationResult() that returns a value of type ValidationResult that contains more information about the missing or wrong config values.</description></item><item><title>Supported Types</title><link>https://poiu-de.github.io/coat-site/docs/user_guide/04_supported_types/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat-site/docs/user_guide/04_supported_types/</guid><description>Builtin types The following types are supported by Coat out of the box and can directly be used as return types of the accessor methods in the annotated interface.
java.lang.String java.time.Duration java.time.LocalDate java.time.LocalDateTime java.time.LocalTime java.io.File java.nio.file.Path java.nio.charset.Charset java.net.InetAddress java.security.MessageDigest For each supported type a converter class exists in the package de.poiu.coat.convert. Refer to the corresponding Java API docs for details about the expected format of the input string.</description></item><item><title>Planned Features</title><link>https://poiu-de.github.io/coat-site/docs/roadmap/01_planned_features/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat-site/docs/roadmap/01_planned_features/</guid><description>Support for arrays and collection types At the moment it is not possible to use arrays or collections with generic types in config classes. This is quiet some drawback and it is planned to be supported in the future.
Generation of example config files As the annotated interface is the specification of the whole valid configuration it would be possible and in fact desirable to let Coat generate an example config file conforming to that specification.</description></item><item><title>Search</title><link>https://poiu-de.github.io/coat-site/search/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://poiu-de.github.io/coat-site/search/</guid><description/></item></channel></rss>
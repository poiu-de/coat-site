[{"body":"The Quick Start guide should help getting started with Coat as easy as possible.\nThe User Guide is the thorough description of all aspects of Coat.\nThe Roadmap gives an overview of the possible further enhancement of Coat.\nQuick Start User Guide Roadmap ","link":"https://poiu-de.github.io/coat-site/docs/","title":"Coat — Config of Annotated Types"},{"body":"","link":"https://poiu-de.github.io/coat-site/docs/user_guide/01_overview/","title":"Overview"},{"body":"Coat has no runtime dependencies on other libraries.\nThe annotation processor has some dependencies on other libraries (which is why it is recommended to use maven as it resolves those dependencies automatically), but none of them are needed at runtime.\nCoat can be used with Java 11 or higher.\n","link":"https://poiu-de.github.io/coat-site/docs/quick_start/01_prerequisites/","title":"Prerequisites"},{"body":"Starting with Coat is easy. Just write an interface with accessor methods for each field that should be configurable. The return values of the accessor methods can be of any type. Many types are already supported out of the box, but it is possible to use custom types.\nThe source of the configuration data doesn't matter. While it mainly intended to be used for the usual java .properties files, it can be used for any data that is composed of simple String-based key-value-mappings.\nAnnotate the interface with the corresponding Annotations and let the Coat annotation processor generate a concrete implementaion of the interface.\nThat implementation can then be used to retrieve correctly typed config values without any additional effort.\nPrerequisites ","link":"https://poiu-de.github.io/coat-site/docs/quick_start/","title":"Quick Start"},{"body":"This guide describes all aspects of Coat, how it can be configured an used.\nOverview ","link":"https://poiu-de.github.io/coat-site/docs/user_guide/","title":"User Guide"},{"body":"","link":"https://poiu-de.github.io/coat-site/docs/user_guide/02_annotations/","title":"Annotations"},{"body":"Coat consists of two separate jars.\n The annotation processor to generate the config classes. Only needed at compile time. The runtime package containing the common base class for all generated config classes and the default type converters. Needed at runtime.  To use Coat in a maven based project use the following maven coordinates:\n1 \u0026lt;!-- Contains the annotation processor. Not needed at runtime. --\u0026gt; 2 \u0026lt;dependency\u0026gt; 3 \u0026lt;groupId\u0026gt;de.poiu.coat\u0026lt;/groupId\u0026gt; 4 \u0026lt;artifactId\u0026gt;coat-processor\u0026lt;/artifactId\u0026gt; 5 \u0026lt;version\u0026gt;0.0.1\u0026lt;/version\u0026gt; 6 \u0026lt;scope\u0026gt;provided\u0026lt;/scope\u0026gt; 7 \u0026lt;/dependency\u0026gt; 8 9 \u0026lt;!-- Contains the converters and base classes. Needed at runtime. --\u0026gt; 10 \u0026lt;dependency\u0026gt; 11 \u0026lt;groupId\u0026gt;de.poiu.coat\u0026lt;/groupId\u0026gt; 12 \u0026lt;artifactId\u0026gt;coat-runtime\u0026lt;/artifactId\u0026gt; 13 \u0026lt;version\u0026gt;0.0.1\u0026lt;/version\u0026gt; 14 \u0026lt;/dependency\u0026gt; ","link":"https://poiu-de.github.io/coat-site/docs/quick_start/02_installation/","title":"Installation"},{"body":"Create config interface Write an interface with accessor methods for each config entry your application supports. The accessor methods can return to concrete types you want your config entry to be. There is number of types that are supported by default, but custom types can be registered to support additional types.\nConfig values that are optional, must be of type java.util.Optional or the more specialized variants OptionalInt, OptionalLong or OptionalDouble. All other config values are considered mandatory. Missing mandatory values will throw exceptions at runtime.\nThe interface must be annotated with the @Coat.Config annotation for the annotation processor to recognize it.\nAlso, each accessor must be annotated with the @Coat.Param annotation to tell the processor the corresponding key in the config file.\nFor example:\n1package com.example; 2 3import de.poiu.coat.annotation.Coat; 4 5@Coat.Config 6public interface AppConfig { 7 @Coat.Param(key = \u0026#34;appName\u0026#34;) 8 public String appName(); 9 10 @Coat.Param(key = \u0026#34;remoteIP\u0026#34;) 11 public InetAddress remoteIP(); 12 13 @Coat.Param(key = \u0026#34;remotePort\u0026#34;) 14 public int remotePort(); 15 16 @Coat.Param(key = \u0026#34;desription\u0026#34;) 17 public Optional\u0026lt;String\u0026gt; description(); 18} Generate concrete config class When compiling the project the annotation processor will produce a concreate implementation of the interface in the same package and (by default) the same name with Immutable prepended to it. Therefore the above example interface would produce a com.example.ImmutableAppConfig class.\nUse the generated config class At runtime the generated config class can be instantiated with either a java.io.File object referencing the actual config file, a java.util.Properties object or, if the config data is read from some other source, with a java.util.Map\u0026lt;String, String\u0026gt;.\nThe instantiated config object can be validated to fail early in case mandatory config values are missing or existing values cannot be converted to the expected type.\n1public class MyApp { 2 public static void main(String[] args) { 3 final ImmutableAppConfig config= new ImmutableAppConfig( 4 new File(\u0026#34;/path/to/config.properties\u0026#34;)); 5 6 try { 7 config.validate(); 8 } catch (final ConfigValidationException ex) { 9 System.err.println(\u0026#34;Error in config file:\\n\u0026#34; 10 + ex.getValidationResult().toString()); 11 System.exit(1); 12 } 13 14 System.out.println(\u0026#34;Starting \u0026#34; + config.appName()); 15 config.description.ifPresent(System.out::println); 16 17 final Socket s= new Socket(config.remoteIP, config.remotePort); 18 19 … 20 } 21} ","link":"https://poiu-de.github.io/coat-site/docs/quick_start/03_usage/","title":"Usage"},{"body":"","link":"https://poiu-de.github.io/coat-site/docs/user_guide/03_validation/","title":"Validation"},{"body":"Builtin types Registering custom types ","link":"https://poiu-de.github.io/coat-site/docs/user_guide/04_supported_types/","title":"Supported Types"},{"body":"Generate typesafe config classes Coat is an annotation processor to generate classes for reading configuration values into typesafe objects.\nShort Usage  For the following config.properties file  appName = My shiny app listenPort = 5040 description = Only a test project  Define a corresponding interface  1import de.poiu.coat.annotation.Coat; 2 3@Coat.Config 4public interface MyConfig { 5 @Coat.Param(key = \u0026#34;appName\u0026#34;) 6 public String appName(); 7 8 @Coat.Param(key = \u0026#34;listenPort\u0026#34;) 9 public int listenPort(); 10 11 @Coat.Param(key = \u0026#34;desription\u0026#34;) 12 public Optional\u0026lt;String\u0026gt; description(); 13}  Then use the generated class  1final MyConfig config= 2 new ImmutableMyConfig( 3 new File(\u0026#34;/path/to/config.properties\u0026#34;)); 4 5final String appName = config.appName(); 6final int listenPort = config.listenPort(); 7config.description().ifPresent( 8 … 9); 10 11 12 13   License Coat is licensed under the terms of the Apache license 2.0.\nQuick StartUser Guide\n","link":"https://poiu-de.github.io/coat-site/","title":"Coat — Config of Annotated Types"},{"body":"","link":"https://poiu-de.github.io/coat-site/docs/roadmap/","title":"Roadmap"}]